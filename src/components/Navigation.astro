---
import ResponsiveToggle from './ResponsiveToggle.astro';
import { DarkMode } from 'accessible-astro-components';
import '../styles/Navigation.scss';
---

<div id="main-navigation" class="is-desktop py-8">
  <div class="container">
    <a href="/" class="flex items-center gap-2 !no-underline">
      <img src={(await import('../assets/img/logo.svg')).default} alt="Your Logo" width="47" height="37" />
      <span class="font-bold">Sakura Kat</span>
    </a>
    <div class="wrapper">
      <nav class="desktop-menu" aria-label="Main navigation desktop">
        <ul class="menu">
          <slot />
        </ul>
      </nav>
      <DarkMode />
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu" aria-label="Main navigation mobile">
      <ul class="menu">
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  // variables
  const mainNav = document.querySelector('#main-navigation');
  const mainMenu = mainNav.querySelector('ul');
  const dropdownMenus = [...document.querySelectorAll('.has-dropdown button')];

  // functions
  const setActiveMenuItem = () => {
    const mobileDesktopMenus = mainNav.querySelectorAll('nav > ul');
    const currenPathname = window.location.pathname;

    mobileDesktopMenus.forEach((menu) => {
      const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[];

      menuItems.forEach((menuItem) => {
        if (currenPathname.includes(menuItem.pathname.replaceAll('/', '')) && 'Home' !== menuItem.textContent) {
          menuItem.classList.add('is-active');
          menuItem.setAttribute('aria-current', 'page');
        } else if ('Home' === menuItem.textContent && '/' === currenPathname) {
          menuItem.classList.add('is-active');
          menuItem.setAttribute('aria-current', 'page');
        }
      });
    });
  };

  const checkMenuSize = () => {
    const mainNavWidth = mainNav.getBoundingClientRect().width;
    const desktopMenuWidth = document.querySelector('.desktop-menu').getBoundingClientRect().width;
    const logoWidthBuffer = 300;
    const totalMenuWidth = Math.round(desktopMenuWidth) + logoWidthBuffer;

    if (totalMenuWidth >= mainNavWidth) {
      mainNav.classList.remove('is-desktop');
      mainNav.classList.add('is-mobile');
    } else if (totalMenuWidth <= mainNavWidth) {
      mainNav.classList.add('is-desktop');
      mainNav.classList.remove('is-mobile');
    }
  };

  const isOutOfViewport = (element) => {
    const elementBounds = element.getBoundingClientRect();
    return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth);
  };

  const openDropdownMenu = (dropdownMenu) => {
    const dropdownList = dropdownMenu.parentNode.querySelector('ul');

    dropdownMenu.classList.add('show');
    dropdownMenu.setAttribute('aria-expanded', 'true');

    if (isOutOfViewport(dropdownList)) {
      dropdownList.style.left = 'auto';
    }
  };

  const closeDropdownMenu = (dropdownMenu) => {
    dropdownMenu.classList.remove('show');
    dropdownMenu.setAttribute('aria-expanded', 'false');
  };

  const closeAllDropdownMenus = () => {
    for (let i = 0; i < dropdownMenus.length; i++) {
      closeDropdownMenu(dropdownMenus[i]);
    }
  };

  const toggleDropdownMenu = (event) => {
    if ('false' === event.target.getAttribute('aria-expanded')) {
      closeAllDropdownMenus();
      openDropdownMenu(event.target);
    } else {
      closeDropdownMenu(event.target);
    }
  };

  // execution
  mainMenu &&
    mainMenu.addEventListener('keydown', (event) => {
      const element = event.target as Element;
      const currentMenuItem = element.closest('li');
      const menuItems = [...mainMenu.querySelectorAll('.menu-item')];
      const currentDropdownMenu = element.closest('.has-dropdown button');
      const currentDropdownMenuItem = element.closest('.has-dropdown li');
      const currentIndex = menuItems.findIndex((item) => item === currentMenuItem);

      const key = event.key;
      let targetItem;

      if ('ArrowRight' === key) {
        if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
          targetItem = menuItems[0];
        } else {
          targetItem = menuItems[currentIndex + 1];
        }
      }

      if ('ArrowLeft' === key) {
        if (0 === menuItems.indexOf(currentMenuItem)) {
          targetItem = menuItems[menuItems.length - 1];
        } else {
          targetItem = menuItems[currentIndex - 1];
        }
      }

      if ('Escape' === key) {
        targetItem = menuItems[0];
      }

      if (currentDropdownMenu) {
        const firstDropdownItem = currentDropdownMenu.nextElementSibling.querySelector('li');

        if ('ArrowDown' === key) {
          event.preventDefault();
          openDropdownMenu(currentDropdownMenu);
          targetItem = firstDropdownItem;
        }

        if ('Escape' === key) {
          closeDropdownMenu(currentDropdownMenu);
        }
      }

      if (currentDropdownMenuItem) {
        const currentDropdownList = currentDropdownMenuItem.parentNode;
        const dropdownMenuItems = [...currentDropdownList.querySelectorAll('li')];
        const currentIndex = dropdownMenuItems.findIndex((item) => item === currentDropdownMenuItem);

        if ('ArrowDown' === key) {
          event.preventDefault();

          if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === dropdownMenuItems.length - 1) {
            targetItem = dropdownMenuItems[0];
          } else {
            targetItem = dropdownMenuItems[currentIndex + 1];
          }
        }

        if ('ArrowUp' === key) {
          event.preventDefault();

          if (0 === dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement)) {
            targetItem = dropdownMenuItems[dropdownMenuItems.length - 1];
          } else {
            targetItem = dropdownMenuItems[currentIndex - 1];
          }
        }

        if ('Escape' === key) {
          const currentDropdownMenu = (currentDropdownList as Element).previousElementSibling;
          targetItem = currentDropdownMenu.parentNode;
          closeAllDropdownMenus();
        }
      }

      if (targetItem) {
        targetItem.querySelector('a, button, input').focus();
      }
    });

  dropdownMenus &&
    dropdownMenus.forEach((dropdownMenu) => {
      dropdownMenu.addEventListener('click', toggleDropdownMenu);
    });

  setActiveMenuItem();
  checkMenuSize();

  window.addEventListener('resize', checkMenuSize);
  window.addEventListener('click', (event) => {
    const element = event.target as Element;
    if (!element.hasAttribute('aria-haspopup') && !element.classList.contains('submenu-item')) {
      closeAllDropdownMenus();
    }
  });
</script>
